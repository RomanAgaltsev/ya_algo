package main

import "testing"

func TestIsCorrectBracketSeq(t *testing.T) {
	seqTests := []struct{
		testNumber string
		seq string
		isCorrect string
	}{
		{"1", "{[()]}", "True"},
		{"2", "()", "True"},
		{"3", "", "True"},
		{"4", "({]})", "False"},
		{"5", ")(", "False"},
		{"6", "((())", "False"},
		{"7", "((())]", "False"},
		{"8", "((())])", "False"},
		{"9", "(){}[]", "True"},
		{"10", "({})({[]}[])", "True"},
		{"11", "(({})({[]}[])", "False"},
		{"12", "[([)][])[){[({)}{[){[([){((", "False"},
		{"13", "]([(([((({))}])])([({})]}(]))](][}{{", "False"},
		{"14", "(}}}{{({])][{]]})][(}]))[()){({{}{", "False"},
		{rue"},
		{{}", "True"},
		{{)", "False"},
		{"18", "[]()}[({([]([[{{)({[(][])[}({)[}[]({)[[{{[[{][[)][{]}[{)[([[{([{]{[){}{}]}[[){(})}(()]{]{{]}}]{[{})})){])[}(([(}]((){)){{{)[)})})}[(})))[{[][}}}){]()[)]]{)){({}[)[}]}{])({)}]{([)))]{{{)[[][(((]{{()){}]}][}[)(}[[]}{])([{([((}[][])][}{})()){}())[{{)(}{}{)))](][]]][))}}}[{)(][}})}[((){(}(}]}({}({})[}([)([{})}[{)[{}})[)})({})[})[{(]{(}}(}]][]{]{[{)([]{{]({{}([}({(]]}}{({[}})){)){)((}{]{{[))}{}{([[((({)}{}{[}(((}[{{})[{]({)[}]}[)]({][}]))}}}(][[(([}][(]([]{(]){}]{[{]{[[])]{{[{}{)[}]{([}([)([(({[)({])}][)()({}}[{]])([({([(}[){}([(]]]))))))}]}[{){[{){){)[{]]({)[)}[({}{}}()})[][}{[(}){]}[{{))({]{[)]]}){]){)}([)(][[}}[[}]}[))}{}[{})}[[}({[))([{))}{[]{((]}()])[}[{[{]}[{{)][(()])((}{[]{}}{[(]}[{()[))}]]}(})][}((}[}})((}{(]))}[}[})){(}[[))})}[}((}{{{[(}{{{({}{](}(([]{]}[]({[[}}{[]{)(})]]{([[}})[([{][[()}[}]{(}][[)(}][))}][]({[]})[{[)[]}{)}]}](]}){]({}[]]())}{{{({{)([)[(({))()]){[){[([(([}}{(}(}{[({](])[(])(){}(((({[(}(}]))[]]({(}{()][]]}]((}}){)([][])}{(}}[]]]]{{{()]{])([)({([]}[})[)}]((})}[(]{{]}", "False"},
		{"19", "])[(}][(({{)[)][{]])))[]))}}{})[}}}([{)}(([]{])]){({[([]){({}][]][(()}}{}}){[]]{{}[)([]}](})(]}{{]}[([(](}[])({}[(]}})(()}([([()[{((]}(([{{{[{[{{}])}}()()]}{[{[]}({)}[))(]]{}{}]}{}[]{{){)[{[]})})]]([[)[(]]})][}[]{({){}])]{}]})][}{}}(}([][]){[()(][[[}(]]}[][)]}((]{{[]))[([[{)){(())[])]{])((})[}}[}][][(])){)}{])[}([[(])}](]}}[}})}{{}[]}[}}()}[](){[]][{{[)][}[[}))})(]({))[{))]}{}[)]])))}]}){()}])][[)(}](]}][]}{][]}{]{({[]){(((]][((})){[((({){)(}){((){)]({}{{)(({)[}{}[])}[))[{{][)[{{{]){{({){{[(()(]]{})})(({{(][](]][[()]{]]))(}}}(({(([[][{)])))]{}(][(({))({([[[[([)[{}{((({]))[(}})}{][)[}]]{}[([}()(])][}[(([]))])(]})}{)}({]((}])}{}(}}{}))}{)}([{)[([(]}(([{][}[})[[{{)](({}}{([{{(}(])]]))]{]{[}(][()}{[([[))[({{{){}](()(}}}][]{{}]([{})(]]}))[)(}[{)(}}[()(}{[((({)(](]))])}])[{)([)((]}))(}][((]}})}[{)((}}((][]][)[}}{[}(({{]({]}(})(){)}]}(})}(]({}[}{{}}}{[)){}{[}){}[)[}(({}{]]){](]]}[)}){]}[)}{)]])}[}[}{]}((){)(}([{}[}[)](][}){}{(}[{}({[}[{))}){)]}{}()}{}}[){){([)]{[[(}({[{({(]}[)(((]})}[[)})}{[}", "False"},
		{"20", "[)}[][}((}[{}){[{()][}])}[(}}{[]}{[{])}{[}(([((){})[]}){}((}]](([)}][[]((){)}}][})(}][((]({[]}[([){[({}]{(][){}{}({))({}{([[{)])]}[]))]{[)))()([])[{[[)({){){}([]){{(]{[]{}{{(}}}(({([{({([([}{()))[(](([{[{[]{[[}]]}{}[])[)}}]([[()]][)[[{(}}[}[(){)]((])}[)){)](]})]({{[){({}{)(}(({)}))(}()[){({}){])}])(}{[[{)][})}[[}{}(](([)})]}})(]{)[()()[{))[[)}){{{)[){[{}()}[}[{][[]]][]})]{{[)({{()]((()}}{](]]}}}}()(([((()){))))(}[{]{}])}[}([{[)[{(]])(]()]([{[)}){{}[]{]}{[(}}(]([)({]}{}())(){[{({[({][][}))(){(({()])}((](}}{([{[()]{][}{}[(}](}){[}})]({({][{][[]{))]]{][)}[()}))[])[{))([}{({}})]}]{{)])][)[{[{][}(})([({{}}[[]{[([}(](})()])]({{{{[{[)](}}{[[)]{][{({}}(((]}]({]((){)((}){]}}]}[({([]]{])]]([}{()(]())[({({]{(}]{[(}(){[{}{)(){)(){(([([})[{{[}]}[)}{])){[{}]}(}]](}{(([[}([}))](}({]]]{)(])]{{{{((}())}{}[))[)][[{)})[[((}]])][){)(){])}{)])[{)){()[))])()[((]{(([])(((}(]]((](]][(}]})[]]){{)}]({}][}}{]){[]{][}(}]}[{)]){[]()([][(]}{[(}]){{[}]]{[}[)[()](}}]{)))[))}{]]))]]}({){)}{]}[)[[])){[}]}(}){}{]({][[((", "False"},
		{"21", "([)]", "False"},
		{"22", "[{(())}({})]", "True"},
		{"23", "[]{}()", "True"},
		{"24", "{}", "True"},
		{"25", "[]", "True"},
		{"26", "[{(})]", "False"},
		{"27", "[(]())]{}", "False"},
		{"28", "()[()]{()()[]}", "True"},
		{"29", "[(]{})", "False"},
	}

	for _, tt := range seqTests {
			t.Run(tt.testNumber, func(t *testing.T) {
				got := IsCorrectBracketSeq(tt.seq)
				if got != tt.isCorrect {
					t.Errorf("got %v want %v", got, tt.isCorrect)
				}
			})
		}
}