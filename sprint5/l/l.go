/*
L. Просеивание вниз

Напишите функцию, совершающую просеивание вниз в куче на максимум.
Гарантируется, что порядок элементов в куче может быть нарушен только элементом, от которого запускается просеивание.
Функция принимает в качестве аргументов массив, в котором хранятся элементы кучи, и индекс элемента, от которого надо сделать просеивание вниз.
Функция должна вернуть индекс, на котором элемент оказался после просеивания. Также необходимо изменить порядок элементов в переданном в функцию массиве.
Индексация в массиве, содержащем кучу, начинается с единицы. Таким образом, сыновья вершины на позиции v это 2v и 2v+1.
Обратите внимание, что нулевой элемент в передаваемом массиве фиктивный, вершина кучи соответствует 1-му элементу.

Формат ввода
Элементы кучи — целые числа, лежащие в диапазоне от −109 до 109.
Все элементы кучи уникальны. Передаваемый в функцию индекс лежит в диапазоне от 1 до размера передаваемого массива.
В куче содержится от 1 до 105 элементов.
*/

package main

func siftDown(heap []int, idx int) int {
	left := 2 * idx
	right := 2*idx + 1
	
	if left >= len(heap) {
		return idx
	}
	
	idxLargest := left
	if right < len(heap) && heap[right] > heap[left] {
		idxLargest = right
	}
	
	if heap[idxLargest] > heap[idx] {
		heap[idx], heap[idxLargest] = heap[idxLargest], heap[idx]
		return siftDown(heap, idxLargest)
	}
	return idx
}

func test() {
	sample := []int{-1, 12, 1, 8, 3, 4, 7}
	if siftDown(sample, 2) != 5 {
		panic("WA")
	}
}

func main() {
	test()
}